
const
{
   WAConnection,
   MessageType,
   Presence,
   MessageOptions,
   Mimetype,
   WALocationMessage,
   WA_MESSAGE_STUB_TYPES,
   ReconnectMode,
   ProxyAgent,
   GroupSettingChange,
   waChatKey,
   mentionedJid,
   processTime,
} = require("@adiwajshing/baileys")
const qrcode = require("qrcode-terminal") 
const moment = require("moment-timezone") 
const fs = require("fs") //SU
const brainly = require('brainly-scraper-v2')
const { color, bgcolor } = require('./lib/color')
const { help } = require('./lib/help')
const { donasi } = require('./lib/donasi')
const { fetchJson } = require('./lib/fetcher')
const { recognize } = require('./lib/ocr')
const { wait, simih, getBuffer, h2k, generateMessageID, getGroupAdmins, getRandom, banner, start, info, success, close } = require('./lib/functions')
const ffmpeg = require('fluent-ffmpeg')
const { removeBackgroundFromImageFile } = require('remove.bg')
const welkom = JSON.parse(fs.readFileSync('./src/welkom.json'))
const nsfw = JSON.parse(fs.readFileSync('./src/nsfw.json'))
const samih = JSON.parse(fs.readFileSync('./src/simi.json'))
			// API KEY
			apiKey = 'Nkwp9oR7Eg9yyKbejBpm' // get in https://mhankbarbars.herokuapp.com/api
			tobzkey = 'BotWeA'// GET IN https://tobz-api.herokuapp.com/api
			vhtearkey = 'yeweemha0601'// GET IN https://api.vhtear.com/
			zekskey = 'itsmeiky63' //GET IN https://api-zeks.harispoppy.com/api
			
const vcard = 'BEGIN:VCARD\n'
            + 'VERSION:3.0\n'
            + 'FN:Ownerbot\n'
            + 'ORG:Creator SELF BOT;\n'
            + 'TEL;type=CELL;type=VOICE;waid=6282338122626:+62 823-3812-2626\n'
            + 'END:VCARD' // T027BOT
prefix = '.'
blocked = []            
const time = moment().tz('Asia/Jakarta').format("HH:mm:ss")
const arrayBulan = ['Januari', 'Februari', 'Maret', 'April', 'Mei', 'Juni', 'Juli', 'Agustus', 'September', 'Oktober', 'November', 'Desember']

const bulan = arrayBulan[moment().format('MM') - 1]


function kyun(seconds){
  function pad(s){
    return (s < 10 ? '0' : '') + s;
  }
  var hours = Math.floor(seconds / (60*60));
  var minutes = Math.floor(seconds % (60*60) / 60);
  var seconds = Math.floor(seconds % 60);

  //return pad(hours) + ':' + pad(minutes) + ':' + pad(seconds)
  return `${pad(hours)}H, ${pad(minutes)}Min, ${pad(seconds)}Sec `
}
        function monospace(string) {
            return '```' + string + '```'
        }




const { exec } = require("child_process")

const hafizh = new WAConnection()

hafizh.on('qr', qr => {
   qrcode.generate(qr, { small: true })
   console.log(`[ ${time} ] QR code is ready`)
})

hafizh.on('credentials-updated', () => {
   const authInfo = hafizh.base64EncodedAuthInfo()
   console.log(`credentials updated!`)

   fs.writeFileSync('./session.json', JSON.stringify(authInfo, null, '\t'))
})

fs.existsSync('./session.json') && hafizh.loadAuthInfo('./session.json')

hafizh.connect();

// hafizh.on('user-presence-update', json => console.log(json.id + ' presence is => ' + json.type)) || console.log(`${time}: Bot by ig:@kingg_squard028`)

hafizh.on('group-participants-update', async (anu) => {
		if (!welkom.includes(anu.jid)) return
		try {
			const mdata = await hafizh.groupMetadata(anu.jid)
			console.log(anu)
			if (anu.action == 'add') {
				num = anu.participants[0]
				try {
					ppimg = await hafizh.getProfilePicture(`${anu.participants[0].split('@')[0]}@c.us`)
				} catch {
					ppimg = 'https://i0.wp.com/www.gambarunik.id/wp-content/uploads/2019/06/Top-Gambar-Foto-Profil-Kosong-Lucu-Tergokil-.jpg'
				}
				teks = `@${num.split('@')[0]}\nwelcome to group *${mdata.subject}* semoga betah`
				let buff = await getBuffer(ppimg)
				hafizh.sendMessage(mdata.id, buff, MessageType.image, {caption: teks, contextInfo: {"mentionedJid": [num]}})
			} else if (anu.action == 'remove') {
				num = anu.participants[0]
				try {
					ppimg = await hafizh.getProfilePicture(`${num.split('@')[0]}@c.us`)
				} catch {
					ppimg = 'https://i0.wp.com/www.gambarunik.id/wp-content/uploads/2019/06/Top-Gambar-Foto-Profil-Kosong-Lucu-Tergokil-.jpg'
				}
				teks = `alhamdulillah, beban hilang 1 @${num.split('@')[0]} `
				let buff = await getBuffer(ppimg)
				hafizh.sendMessage(mdata.id, buff, MessageType.image, {caption: teks, contextInfo: {"mentionedJid": [num]}})
			}
		} catch (e) {
			console.log('Error : %s', color(e, 'red'))
		}
	})
	hafizh.on('CB:Blocklist', json => {
		if (blocked.length > 2) return
	    for (let i of json[1].blocklist) {
	    	blocked.push(i.replace('c.us','s.whatsapp.net'))
	    }
	})

	hafizh.on('message-new', async (tod) => {
		try {
			if (!tod.message) return
			if (tod.key && tod.key.remoteJid == 'status@broadcast') return
			if (!tod.key.fromMe) return
			global.prefix
			global.blocked
			const content = JSON.stringify(tod.message)
			const from = tod.key.remoteJid
			const type = Object.keys(tod.message)[0]
			
			const { text, extendedText, contact, location, liveLocation, image, video, sticker, document, audio, product } = MessageType
			const time = moment.tz('Asia/Jakarta').format('DD/MM HH:mm:ss')
			body = (type === 'conversation' && tod.message.conversation.startsWith(prefix)) ? tod.message.conversation : (type == 'imageMessage') && tod.message.imageMessage.caption.startsWith(prefix) ? tod.message.imageMessage.caption : (type == 'videoMessage') && tod.message.videoMessage.caption.startsWith(prefix) ? tod.message.videoMessage.caption : (type == 'extendedTextMessage') && tod.message.extendedTextMessage.text.startsWith(prefix) ? tod.message.extendedTextMessage.text : ''
			budy = (type === 'conversation') ? tod.message.conversation : (type === 'extendedTextMessage') ? tod.message.extendedTextMessage.text : ''
			const command = body.slice(1).trim().split(/ +/).shift().toLowerCase()
			const args = body.trim().split(/ +/).slice(1)
			const isCmd = body.startsWith(prefix)

			mess = {
				wait: 'Loading...',
				success: 'Ô∏èsuccess ‚úî ',
				error: {
					stick: 'error gan',
					Iv: 'Link ga valid gan'
				},
				only: {
					group: 'only gc',
					ownerG: 'only owner gc',
					ownerB: 'only owner bot',
					admin: 'only admin gc',
					Badmin: 'jadikan ot admin udin'
				}
			}
			const botNumber = hafizh.user.jid
			const ownerNumber = ["6282338122626@s.whatsapp.net"] // ganti nomer lu
			const isGroup = from.endsWith('@g.us')
			const sender = isGroup ? tod.participant : tod.key.remoteJid
			const groupMetadata = isGroup ? await hafizh.groupMetadata(from) : ''
			const groupName = isGroup ? groupMetadata.subject : ''
			const groupId = isGroup ? groupMetadata.jid : ''
			const groupMembers = isGroup ? groupMetadata.participants : ''
			const groupAdmins = isGroup ? getGroupAdmins(groupMembers) : ''
			const isBotGroupAdmins = groupAdmins.includes(botNumber) || false
			const isGroupAdmins = groupAdmins.includes(sender) || false
			const isWelkom = isGroup ? welkom.includes(from) : false
			const isNsfw = isGroup ? nsfw.includes(from) : false
			const isSimi = isGroup ? samih.includes(from) : false
			const isOwner = ownerNumber.includes(sender)
			const isUrl = (url) => {
			    return url.match(new RegExp(/https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)/, 'gi'))
			}
			const reply = (teks) => {
				hafizh.sendMessage(from, teks, text, {quoted:tod})
			}
			const sendMess = (hehe, teks) => {
				hafizh.sendMessage(hehe, teks, text)
			}
			const mentions = (teks, memberr, id) => {
				(id == null || id == undefined || id == false) ? hafizh.sendMessage(from, teks.trim(), extendedText, {contextInfo: {"mentionedJid": memberr}}) : hafizh.sendMessage(from, teks.trim(), extendedText, {quoted: tod, contextInfo: {"mentionedJid": memberr}})
			}

			colors = ['red','white','black','blue','yellow','green']
			const isMedia = (type === 'imageMessage' || type === 'videoMessage')
			const isQuotedImage = type === 'extendedTextMessage' && content.includes('imageMessage')
			const isQuotedVideo = type === 'extendedTextMessage' && content.includes('videoMessage')
			const isQuotedSticker = type === 'extendedTextMessage' && content.includes('stickerMessage')
			if (!isGroup && isCmd) console.log('\x1b[1;31m~\x1b[1;37m>', '[\x1b[1;32mEXEC\x1b[1;37m]', time, color(command), 'from', color(sender.split('@')[0]), 'args :', color(args.length))
			if (isCmd && isGroup) console.log('\x1b[1;31m~\x1b[1;37m>', '[\x1b[1;32mEXEC\x1b[1;37m]', time, color(command), 'from', color(sender.split('@')[0]), 'in', color(groupName), 'args :', color(args.length))
			switch(command) {
				case 'menu': 
				case 'help':
					hafizh.sendMessage(from, help(prefix), text, {quoted: { key: { fromMe: false, participant: `0@s.whatsapp.net`, ...(from ? { remoteJid: "6285770269605-1614125991@g.us" } : {}) }, message: { conversation: `AJARIN BIKIN BOT DONG` }}})
					break
				case 'brainly':
				case 'b':
                                       if (args.length < 1) return reply('Pertanyaanya apa tod')
                                       brn = body.slice(9)
                                       brainly(brn, 10, "id").then(res => {
                                       teks = '=================\n'
                                       no = 0
                                        for (let i of res.data) {
                                        for (let ii of i.jawaban) {
                                        no += 1
                                       teks += `*ùóõùóîùó¶ùóúùóü ùóûùóò ${no.toString()}*\n\n*Pertanyaan* : ${i.pertanyaan}\n*Jawaban* : ${ii.text}\n=================\n`
                                        }
                                        }
                                        teks += `*TOTAL 14 HASIL*\n=================`
                                        hafizh.sendMessage(from, `${teks}`, text, {quoted: tod});
                                        }).catch(e => {
                                        console.log(e)
                                        hafizh.sendMessage(isOwner, 'Brainly Error : ' + e, text, {quoted: tod});
                                            })
                    break
				case 'donasi':
				case 'donate':
					hafizh.sendMessage(from, donasi(), text)
					break
				case 'info':
					me = hafizh.user
					uptime = process.uptime()
					teks = `ùó°ùóÆùó∫ùóÆ ùóØùóºùòÅ : ${me.name}\n*ùó°ùóºùó∫ùó≤ùóø ùóØùóºùòÅ* : @${me.jid.split('@')[0]}\n*ùó£ùóøùó≤ùó≥ùó∂ùòÖ* : ${prefix}\nùóßùóºùòÅùóÆùóπ ùóïùóπùóºùó∞ùó∏ ùóñùóºùóªùòÅùóÆùó∞ùòÅ : ${blocked.length}\nùóßùóµùó≤ ùóØùóºùòÅ ùó∂ùòÄ ùóÆùó∞ùòÅùó∂ùòÉùó≤ ùóºùóª : ${kyun(uptime)}`
					buffer = await getBuffer(me.imgUrl)
					hafizh.sendMessage(from, buffer, image, {caption: teks, contextInfo:{mentionedJid: [me.jid]}})
					break
			case 'readall':
					var chats = await hafizh.chats.all()
                    chats.map( async ({ jid }) => {
                          await hafizh.chatRead(jid)
                    })
					teks = `\`\`\`Berhasil membaca ${chats.length} Chat !\`\`\``
					await hafizh.sendMessage(from, teks, text, {quoted: tod})
					console.log(chats.length)
					break
				case 'blocklist': 
					teks = 'BLOCK LIST  :\n'
					for (let block of blocked) {
						teks += `‚î£‚û¢ @${block.split('@')[0]}\n`
					}
					teks += `ùóßùóºùòÅùóÆùóπ : ${blocked.length}`
					hafizh.sendMessage(from, teks.trim(), extendedText, {quoted: tod, contextInfo: {"mentionedJid": blocked}})
					break
				case 'ocr': 
					if ((isMedia && !tod.message.videoMessage || isQuotedImage) && args.length == 0) {
						const encmedia = isQuotedImage ? JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo : tod
						const media = await hafizh.downloadAndSaveMediaMessage(encmedia)
						reply(mess.wait)
						await recognize(media, {lang: 'eng+ind', oem: 1, psm: 3})
							.then(teks => {
								reply(teks.trim())
								fs.unlinkSync(media)
							})
							.catch(err => {
								reply(err.message)
								fs.unlinkSync(media)
							})
					} else {
						reply(`ùó∏ùó∂ùóøùó∂ùó∫ ùó≥ùóºùòÅùóº ùó±ùó≤ùóªùó¥ùóÆùóª ùó∞ùóÆùóΩùòÅùó∂ùóºùóª ${prefix}ùóºùó∞ùóø`)
					}
					break
				case 'stiker': 
				case 'sticker':
				case 's':
					if ((isMedia && !tod.message.videoMessage || isQuotedImage) && args.length == 0) {
						const encmedia = isQuotedImage ? JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo : tod
						const media = await hafizh.downloadAndSaveMediaMessage(encmedia)
						ran = getRandom('.webp')
						await ffmpeg(`./${media}`)
							.input(media)
							.on('start', function (cmd) {
								console.log(`Started : ${cmd}`)
							})
							.on('error', function (err) {
								console.log(`Error : ${err}`)
								fs.unlinkSync(media)
								reply(mess.error.stick)
							})
							.on('end', function () {
								console.log('Finish')
								buff = fs.readFileSync(ran)
								hafizh.sendMessage(from, buff, sticker, {quoted: tod})
								fs.unlinkSync(media)
								fs.unlinkSync(ran)
							})
							.addOutputOptions([`-vcodec`,`libwebp`,`-vf`,`scale='min(320,iw)':min'(320,ih)':force_original_aspect_ratio=decrease,fps=15, pad=320:320:-1:-1:color=white@0.0, split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse`])
							.toFormat('webp')
							.save(ran)
					} else if ((isMedia && tod.message.videoMessage.seconds < 11 || isQuotedVideo && tod.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage.seconds < 11) && args.length == 0) {
						const encmedia = isQuotedVideo ? JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo : tod
						const media = await hafizh.downloadAndSaveMediaMessage(encmedia)
						ran = getRandom('.webp')
						reply(mess.wait)
						await ffmpeg(`./${media}`)
							.inputFormat(media.split('.')[1])
							.on('start', function (cmd) {
								console.log(`Started : ${cmd}`)
							})
							.on('error', function (err) {
								console.log(`Error : ${err}`)
								fs.unlinkSync(media)
								tipe = media.endsWith('.mp4') ? 'video' : 'gif'
								reply(`ùó¨ùóÆùóµ ùó¥ùóÆùó¥ùóÆùóπ, ùòÇùóπùóÆùóªùó¥ùó∂ ùóπùóÆùó¥ùó∂ ùòÜùóÆ ùòÄùóÆùòÜùóÆùóªùó¥`)
							})
							.on('end', function () {
								console.log('Finish')
								buff = fs.readFileSync(ran)
								hafizh.sendMessage(from, buff, sticker, {quoted: tod})
								fs.unlinkSync(media)
								fs.unlinkSync(ran)
							})
							.addOutputOptions([`-vcodec`,`libwebp`,`-vf`,`scale='min(320,iw)':min'(320,ih)':force_original_aspect_ratio=decrease,fps=15, pad=320:320:-1:-1:color=white@0.0, split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse`])
							.toFormat('webp')
							.save(ran)
					} else if ((isMedia || isQuotedImage) && args[0] == 'nobg') {
						const encmedia = isQuotedImage ? JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo : tod
						const media = await hafizh.downloadAndSaveMediaMessage(encmedia)
						ranw = getRandom('.webp')
						ranp = getRandom('.png')
						reply(mess.wait)
						keyrmbg = 'APIKEY'
						await removeBackgroundFromImageFile({path: media, apiKey: keyrmbg.result, size: 'auto', type: 'auto', ranp}).then(res => {
							fs.unlinkSync(media)
							let buffer = Buffer.from(res.base64img, 'base64')
							fs.writeFileSync(ranp, buffer, (err) => {
								if (err) return reply('ùó¨ùóÆùóµ ùó¥ùóÆùó¥ùóÆùóπ, ùòÇùóπùóÆùóªùó¥ùó∂ ùóπùóÆùó¥ùó∂ ùòÜùóÆ ùòÄùóÆùòÜùóÆùóªùó¥')
							})
							exec(`ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=20 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${ranw}`, (err) => {
								fs.unlinkSync(ranp)
								if (err) return reply(mess.error.stick)
								buff = fs.readFileSync(ranw)
								hafizh.sendMessage(from, buff, sticker, {quoted: tod})
							})
						})					
					} else {
						reply(`ùó∏ùó∂ùóøùó∂ùó∫ ùó¥ùóÆùó∫ùóØùóÆùóø ùó±ùó≤ùóªùó¥ùóÆùóª ùó∞ùóÆùóΩùòÅùó∂ùóºùóª ${prefix}ùòÄùòÅùó∂ùó∞ùó∏ùó≤ùóø ùóÆùòÅùóÆùòÇ ùóøùó≤ùóΩùóπùòÜ/ùòÅùóÆùó¥ ùó¥ùóÆùó∫ùóØùóÆùóø`)
					}
					break
				case 'gtts':	
				case 'tts':
					if (args.length < 1) return hafizh.sendMessage(from, 'ùó±ùó∂ùóΩùó≤ùóøùóπùòÇùó∏ùóÆùóª ùó∏ùóºùó±ùó≤ ùóØùóÆùóµùóÆùòÄùóÆ!', text, {quoted: tod})
					const gtts = require('./lib/gtts')(args[0])
					if (args.length < 2) return hafizh.sendMessage(from, 'ùóßùó≤ùó∏ùòÄ ùó∫ùóÆùóªùóÆ ùòÅùó≤ùó∏ùòÄ?', text, {quoted: tod})
					dtt = body.slice(9)
					ranm = getRandom('.mp3')
					rano = getRandom('.ogg')
					dtt.length > 300
					? reply('ùòÅùó≤ùó∏ùòÄùóªùòÜùóÆ ùó∑ùóÆùóªùó¥ùóÆùóª ùó∏ùó≤ùóΩùóÆùóªùó∑ùóÆùóªùó¥ùóÆùóª')
					: gtts.save(ranm, dtt, function() {
						exec(`ffmpeg -i ${ranm} -ar 48000 -vn -c:a libopus ${rano}`, (err) => {
							fs.unlinkSync(ranm)
							buff = fs.readFileSync(rano)
							if (err) return reply('ùó¨ùóÆùóµ ùó¥ùóÆùó¥ùóÆùóπ, ùòÇùóπùóÆùóªùó¥ùó∂ ùóπùóÆùó¥ùó∂ ùòÜùóÆ ùòÄùóÆùòÜùóÆùóªùó¥')
							hafizh.sendMessage(from, buff, audio, {quoted: tod, ptt:true})
							fs.unlinkSync(rano)
						})
					})
					break
				case 'setprefix':
					if (args.length < 1) return
					prefix = args[0]
					reply(`ùó£ùóøùó≤ùó≥ùó∂ùòÖ ùóØùó≤ùóøùóµùóÆùòÄùó∂ùóπ ùó±ùó∂ ùòÇùóØùóÆùóµ ùó∫ùó≤ùóªùó∑ùóÆùó±ùó∂ : ${prefix}`)
					break 	
			       case 'pussy':
					ranp = getRandom('.gif')
					rano = getRandom('.webp')
					anu = await fetchJson('https://nekos.life/api/v2/img/pussy', {method: 'get'})
					if (anu.error) return reply(anu.error)

					exec(`wget ${anu.url} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {
						fs.unlinkSync(ranp)
						if (err) return reply(mess.error.stick)
						buffer = fs.readFileSync(rano)
						hafizh.sendMessage(from, buffer, sticker, {quoted: tod})
						fs.unlinkSync(rano)
					})
					break
            case 'nsfwgif':
					ranp = getRandom('.gif')
					rano = getRandom('.webp')
					anu = await fetchJson('https://nekos.life/api/v2/img/nsfw_neko_gif', {method: 'get'})
					if (anu.error) return reply(anu.error)

					exec(`wget ${anu.url} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {
						fs.unlinkSync(ranp)
						if (err) return reply(mess.error.stick)
						buffer = fs.readFileSync(rano)
						hafizh.sendMessage(from, buffer, sticker, {quoted: tod})
						fs.unlinkSync(rano)
					})
					break
            case 'tabok':
					ranp = getRandom('.gif')
					rano = getRandom('.webp')
					anu = await fetchJson('https://nekos.life/api/v2/img/spank', {method: 'get'})
					if (anu.error) return reply(anu.error)

					exec(`wget ${anu.url} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {
						fs.unlinkSync(ranp)
						if (err) return reply(mess.error.stick)
						buffer = fs.readFileSync(rano)
						hafizh.sendMessage(from, buffer, sticker, {quoted: tod})
						fs.unlinkSync(rano)
					})
					break
            case 'kiss':
					ranp = getRandom('.gif')
					rano = getRandom('.webp')
					anu = await fetchJson('https://nekos.life/api/v2/img/kiss', {method: 'get'})
					if (anu.error) return reply(anu.error)

					exec(`wget ${anu.url} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {
						fs.unlinkSync(ranp)
						if (err) return reply(mess.error.stick)
						buffer = fs.readFileSync(rano)
						hafizh.sendMessage(from, buffer, sticker, {quoted: tod})
						fs.unlinkSync(rano)
					})
					break	
				case 'meme': 
					meme = await kagApi.memes()
					buffer = await getBuffer(`https://imgur.com/${meme.hash}.jpg`)
					hafizh.sendMessage(from, buffer, image, {quoted: tod, caption: '.......'})
					break
				case 'memeindo': 
					memein = await kagApi.memeindo()
					buffer = await getBuffer(`https://imgur.com/${memein.hash}.jpg`)
					hafizh.sendMessage(from, buffer, image, {quoted: tod, caption: '.......'})
					break
								                case 'ssphone':
                buff = await getBuffer(`https://api.vhtear.com/ssweb?link=${body.slice(8)}&type=phone&apikey=${vhtearkey}`)
                
				hafizh.sendMessage(from, buff, image, {quoted: tod})
				break   
				                case 'sspc':
                buff = await getBuffer(`https://api.vhtear.com/ssweb?link=${body.slice(7)}&type=pc&apikey=${vhtearkey}`)
                
				hafizh.sendMessage(from, buff, image, {quoted: tod})
				break     
			         case 'puisi':
                buff = await getBuffer(`https://api.vhtear.com/puisi_image&apikey=${vhtearkey}`)
				hafizh.sendMessage(from, buff, image, {quoted: tod})
				break
			    case 'darkjoke':
                                data = await fetchJson(`https://api-zeks.harispoppy.com/api/darkjokes?apikey=${zekskey}`)
                                dark = data.result
                                thumb = await getBuffer(dark)
                                hafizh.sendMessage(from, thumb, image, {quoted: tod})
                                break
                case 'harta':
                buff = await getBuffer(`https://api.vhtear.com/hartatahta?text=${body.slice(7)}&apikey=${vhtearkey}`)
				hafizh.sendMessage(from, buff, image, {quoted: tod})
				break
                case 'lovetext':
                buff = await getBuffer(`https://api.vhtear.com/lovemessagetext?text=${body.slice(10)}&apikey=${vhtearkey}`)
				hafizh.sendMessage(from, buff, image, {quoted: tod})
				break
				
			case 'loli': 
				    try {
						res = await fetchJson(`https://api.lolis.life/random`, {method: 'get'})
						buffer = await getBuffer(res.url)
						hafizh.sendMessage(from, buffer, image, {quoted: tod, caption: 'ingat! Cintai lolimu'})
					} catch (e) {
						console.log(`Error :`, color(e,'red'))
						reply('ùóòùó•ùó•ùó¢ùó•')
					}
					break
				case 'nsfwloli': 
				    try {
						if (!isNsfw) return reply('ùó†ùóÆùóÆùó≥ ùó≥ùó∂ùòÅùòÇùóø ùó∂ùóªùó∂ ùóØùó≤ùóπùòÇùó∫ ùó±ùó∂ ùóÆùó∏ùòÅùó∂ùó≥ùó∏ùóÆùóª/ùó∏ùó≤ùòÄùóÆùóπùóÆùóµùóÆùóª ùòÄùó≤ùóøùòÉùó≤ùóøùóªùòÜùóÆ')
						res = await fetchJson(`https://api.lolis.life/random?nsfw=true`, {method: 'get'})
						buffer = await getBuffer(res.url)
						hafizh.sendMessage(from, buffer, image, {quoted: tod, caption: 'Jangan jadiin bahan buat comli'})
					} catch (e) {
						console.log(`Error :`, color(e,'red'))
						reply('ùóòùó•ùó•ùó¢ùó•')
					}
					break
				
				case 'holoh': 
					if (args.length < 1) return reply('ùó∏ùóÆùòÄùó∂ùóµ ùòÅùó≤ùó∏ùòÄ ùóπùóÆùóµ!!!')
					anu = await fetchJson(`https://shirayuki-api.herokuapp.com/api/v1/holoh?kata=${body.slice(7)}`, {method: 'get'})
					reply(anu.result)
					break
				case 'hilih': 
					if (args.length < 1) return reply('ùó∏ùóÆùòÄùó∂ùóµ ùòÅùó≤ùó∏ùòÄ ùóπùóÆùóµ!!!')
					anu = await fetchJson(`https://mhankbarbars.herokuapp.com/api/hilih?teks=${body.slice(7)}`, {method: 'get'})
					reply(anu.result)
					break
				case 'yt': 
					if (args.length < 1) return reply('ùòÇùóøùóπùóªùòÜùóÆ ùó∫ùóÆùóªùóÆ?')
					if(!isUrl(args[0]) && !args[0].includes('youtube.com')) return reply(mess.error.Iv)
					anu = await fetchJson(`https://mhankbarbars.herokuapp.com/api/yta?url=${args[0]}&apiKey=Nkwp9oR7Eg9yyKbejBpm`, {method: 'get'})
					if (anu.error) return reply(anu.error)
					teks = `*Title* : ${anu.title}\n*Filesize* : ${anu.filesize}`
					thumb = await getBuffer(anu.thumb)
					hafizh.sendMessage(from, thumb, image, {quoted: tod, caption: teks})
					buffer = await getBuffer(anu.result)
					hafizh.sendMessage(from, buffer, audio, {mimetype: 'audio/mp4', filename: `${anu.title}.mp3`, quoted: tod})
					break
				case 'ytsearch': 
					if (args.length < 1) return reply('ùóßùó≤ùó∏ùòÄùóªùòÜùóÆ ùó∫ùóÆùóªùóÆ ùòÅùó≤ùó∏ùòÄ?')
					anu = await fetchJson(`https://mhankbarbars.herokuapp.com/api/ytsearch?q=${body.slice(8)}&apiKey=Nkwp9oR7Eg9yyKbejBpm`, {method: 'get'})
					if (anu.error) return reply(anu.error)
					teks = '=================\n'
					for (let i of anu.result) {
						teks += `*Title* : ${i.title}\n*Id* : ${i.id}\n*Published* : ${i.publishTime}\n*Duration* : ${i.duration}\n*Views* : ${h2k(i.views)}\n=================\n`
					}
					reply(teks.trim())
					break
				case 'yt2mp3':
					if (args.length < 1) return reply('Urlnya mana um?')
					if(!isUrl(args[0]) && !args[0].includes('youtu')) return reply(mess.error.Iv)
					anu = await fetchJson(`https://mhankbarbars.herokuapp.com/api/yta?url=${args[0]}&apiKey=Nkwp9oR7Eg9yyKbejBpm`, {method: 'get'})
					if (anu.error) return reply(anu.error)
					teks = `*Title* : ${anu.title}\n*Filesize* : ${anu.filesize}`
					thumb = await getBuffer(anu.thumb)
					hafizh.sendMessage(from, thumb, image, {quoted: tod, caption: teks})
					buffer = await getBuffer(anu.result)
					hafizh.sendMessage(from, buffer, audio, ytmp3, {mimetype: 'audio/mp4', filename: `${anu.title}.mp3`, quoted: tod})
					break
			case 'joox':
					data = await fetchJson(`https://api.vhtear.com/joox?query=${body.slice(7)}&apikey=${vhtearkey}`, {method: 'get'})
					teks = '=================\n'
					const joox = data.result
						teks += `*Judul:* ${joox.title}\n*Album:* ${joox.album}\n*dipublikasian pada*: ${joox.dipublikasi}\n*Download sendiri:* ${joox.mp3}\n=================\n`
					thumb = await getBuffer(joox.thumb)
					hafizh.sendMessage(from, thumb, image, {quoted: tod, caption: teks})
					buffer = await getBuffer(joox.mp3)
					hafizh.sendMessage(from, buffer, audio, {mimetype: 'audio/mp4', filename: `${joox.title}.mp3`, quoted: tod})
					break
			case 'play':
					data = await fetchJson(`https://api.vhtear.com/ytmp3?query=${body.slice(7)}&apikey=${vhtearkey}`, {method: 'get'})
					teks = '=================\n'
					const play = data.result
						teks += `*Judul:* ${play.title}\n*Durasi:* ${play.duration}\n*size*: ${play.size}\n\n=================`
					thumb = await getBuffer(play.image)
					hafizh.sendMessage(from, thumb, image, {quoted: tod, caption: teks})
					buffer = await getBuffer(play.mp3)
					hafizh.sendMessage(from, buffer, audio, {mimetype: 'audio/mp4', filename: `${play.title}.mp3`, quoted: tod})
					break
				case 'tiktok': 
					if (args.length < 1) return reply('ùòÇùóøùóπùóªùòÜùóÆ ùó∫ùóÆùóªùóÆ?')
					if (!isUrl(args[0]) && !args[0].includes('tiktok.com')) return reply(mess.error.Iv)
					reply(mess.wait)
					anu = await fetchJson(`https://mhankbarbars.herokuapp.com/api/tiktok?url=${args[0]}&apiKey=Nkwp9oR7Eg9yyKbejBpm`, {method: 'get'})
					if (anu.error) return reply(anu.error)
					buffer = await getBuffer(anu.result)
					hafizh.sendMessage(from, buffer, video, {quoted: tod})
					break
				case 'tiktokstalk':
					try {
						if (args.length < 1) return hafizh.sendMessage(from, 'ùòÇùòÄùó≤ùóøùóªùóÆùó∫ùó≤ ùó∫ùóÆùóªùóÆ?', text, {quoted: tod})
						let { user, stats } = await tiktod.getUserProfileInfo(args[0])
						reply(mess.wait)
						teks = `*ID* : ${user.id}\n*Username* : ${user.uniqueId}\n*Nickname* : ${user.nickname}\n*Followers* : ${stats.followerCount}\n*Followings* : ${stats.followingCount}\n*Posts* : ${stats.videoCount}\n*Luv* : ${stats.heart}\n`
						buffer = await getBuffer(user.avatarLarger)
						hafizh.sendMessage(from, buffer, image, {quoted: tod, caption: teks})
					} catch (e) {
						console.log(`Error :`, color(e,'red'))
						reply('[ùóòùó•ùó•ùó¢ùó•] ùó∏ùó≤ùó∫ùòÇùóªùó¥ùó∏ùó∂ùóªùóÆùóª ùòÇùòÄùó≤ùóøùóªùóÆùó∫ùó≤ ùòÅùó∂ùó±ùóÆùó∏ ùòÉùóÆùóπùó∂ùó±')
					}
					break
				case 'igstalk':
					if (args.length < 1) return reply('Masukan username!!')
					ige = body.slice(9)
					reply(mess.wait)
					anu = await fetchJson(`https://api.vhtear.com/igprofile?query=${ige}&apikey=yeweemha0601`, {method: 'get'})
					buffer = await getBuffer(anu.result.picture)
					capt = `User Ditemukan!!\n\n*‚û∏ Nama :* ${anu.result.full_name}\n*‚û∏ Username :* ${anu.result.username}\n*‚û∏ Followers :* ${anu.result.follower}\n*‚û∏ Mengikuti :* ${anu.result.follow}\n*‚û∏ Jumlah Post :* ${anu.result.post_count}\n*‚û∏ Private :* ${anu.result.is_private}\n*‚û∏ Bio :* ${anu.result.biography}`
					hafizh.sendMessage(from, buffer, image, {quoted: tod, caption: capt})
					break
				case 'pinterest':
					if (args.length < 1) return reply(mess.search)
					pinte = body.slice(11)
					anu = await fetchJson(`https://api.vhtear.com/pinterest?query=${pin}&apikey=yeweemha0601`, {method: 'get'})
					reply(mess.wait)
					var pin = JSON.parse(JSON.stringify(anu.result));
					var trest =  pin[Math.floor(Math.random() * pin.length)];
					pine = await getBuffer(trest)
					hafizh.sendMessage(from, pine, image, { caption: '*Pinterest*\n\n*Hasil Pencarian : '+pinte+'*', quoted: tod })
					break
				case 'galaxtext':
					if (args.length < 1) return reply('mau apa om')
					teks = body.slice(12)
					if (teks.length > 8) return reply('Teksnya kepanjangan, maksimal 8 karakter')
					reply(mess.wait)
					buffer = await getBuffer(`https://api.vhtear.com/galaxytext?text=${teks}&apikey=mhywmhyw`)
					hafizh.sendMessage(from, buffer, image, {quoted: tod})
					break
                case 'phlogo':
					var gh = body.slice(10)
					var gbl1 = gh.split("|")[0];
					var gbl2 = gh.split("|")[1];
					if (args.length < 1) return reply('Teksnya mana um')
					reply(mess.wait)
					anu = await fetchJson(`https://mhankbarbars.herokuapp.com/api/textpro?theme=pornhub&text1=${gbl1}&text2=${gbl2}`, {method: 'get'})
					buffer = await getBuffer(anu.result)
					hafizh.sendMessage(from, buffer, image, {quoted: tod})
					break
				case 'nulis': 
				case 'tulis':
					if (args.length < 1) return reply('ùóßùó≤ùó∏ùòÄùóªùòÜùóÆ ùó∫ùóÆùóªùóÆ ùòÅùó≤ùó∏ùòÄ?')
					teks = body.slice(7)
					reply(mess.wait)
					anu = await fetchJson(`https://mhankbarbars.herokuapp.com/nulis?text=${teks}&apiKey=Nkwp9oR7Eg9yyKbejBpm`, {method: 'get'})
					if (anu.error) return reply(anu.error)
					buff = await getBuffer(anu.result)
					hafizh.sendMessage(from, buff, image, {quoted: tod, caption: mess.success})
					break
				case 'url2img': 
					tipelist = ['desktop','tablet','mobile']
					if (args.length < 1) return reply('ùóßùó∂ùóΩùó≤ùóªùòÜùóÆ ùóÆùóΩùóÆ??')
					if (!tipelist.includes(args[0])) return reply('ùóßùó∂ùóΩùó≤ ùó±ùó≤ùòÄùó∏ùòÅùóºùóΩ|ùòÅùóÆùóØùóπùó≤ùòÅ|ùó∫ùóºùóØùó∂ùóπùó≤')
					if (args.length < 2) return reply('ùòÇùóøùóπùóªùòÜùóÆ ùó∫ùóÆùóªùóÆ?')
					if (!isUrl(args[1])) return reply(mess.error.Iv)
					reply(mess.wait)
					anu = await fetchJson(`https://mhankbarbars.herokuapp.com/api/url2image?tipe=${args[0]}&url=${args[1]}&apiKey=Nkwp9oR7Eg9yyKbejBpm`, {method: 'get'})
					if (anu.error) return reply(anu.error)
					buff = await getBuffer(anu.result)
					hafizh.sendMessage(from, buff, image, {quoted: tod})
					break
				case 'tstiker':
				case 'tsticker': 
					if (args.length < 1) return reply('ùó∏ùóÆùòÄùó∂ùóµ ùòÅùó≤ùó∏ùòÄ ùóπùóÆùóµ!!!')
					ranp = getRandom('.png')
					rano = getRandom('.webp')
					teks = body.slice(9).trim()
					anu = await fetchJson(`https://mhankbarbars.herokuapp.com/api/text2image?text=${teks}&apiKey=Nkwp9oR7Eg9yyKbejBpm`, {method: 'get'})
					if (anu.error) return reply(anu.error)
					exec(`wget ${anu.result} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=20 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {
						fs.unlinkSync(ranp)
						if (err) return reply(mess.error.stick)
						buffer = fs.readFileSync(rano)
						hafizh.sendMessage(from, buffer, sticker, {quoted: tod})
						fs.unlinkSync(rano)
					})
					break
                  break	
				case 'tagall':
					if (!isGroup) return reply(mess.only.group)
					members_id = []
					teks = (args.length > 1) ? body.slice(8).trim() : ''
					teks += '\n\n'
					for (let mem of groupMembers) {
						rchoice = Math.floor(Math.random() * list_emoji.length)
						teks += `‚î£‚û• @${mem.jid.split('@')[0]}\n`
						members_id.push(mem.jid)
					}
					mentions(teks, members_id, true)
					break
				case 'hidetag':
					if (!isGroup) return reply(mess.only.group)
					var value = body.slice(9)
					var group = await hafizh.groupMetadata(from)
					var member = group['participants']
					var mem = []
					member.map( async adm => {
					mem.push(adm.id.replace('c.us', 's.whatsapp.net'))
					})
					var options = {
					text: value,
					contextInfo: { mentionedJid: mem },
					quoted: tod
					}
					hafizh.sendMessage(from, options, text)
					break
				case 'hidetag50':
					if (!isGroup) return reply(mess.only.group)
					var value = body.slice(10)
					var group = await hafizh.groupMetadata(from)
					var member = group['participants']
					var mem = []
					member.map( async adm => {
					mem.push(adm.id.replace('c.us', 's.whatsapp.net'))
					})
					var options = {
					text: value,
					contextInfo: { mentionedJid: mem },
					quoted: tod
					}
					hafizh.sendMessage(from, options, text)
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	.then(() => {hafizh.sendMessage(from, options, text)})
	.then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                 .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	.then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	.then(() => {hafizh.sendMessage(from, options, text)})
	.then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                 .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	.then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	.then(() => {hafizh.sendMessage(from, options, text)})
	.then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                 .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	.then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	.then(() => {hafizh.sendMessage(from, options, text)})
	.then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                 .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	.then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	.then(() => {hafizh.sendMessage(from, options, text)})
	.then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                 .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	.then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	.then(() => {hafizh.sendMessage(from, options, text)})
	.then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                 .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	.then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	.then(() => {hafizh.sendMessage(from, options, text)})
	.then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                 .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	.then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	.then(() => {hafizh.sendMessage(from, options, text)})
	.then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                 .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	.then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	.then(() => {hafizh.sendMessage(from, options, text)})
	.then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                 .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
	                .then(() => {hafizh.sendMessage(from, options, text)})
					break
				case 'fitnah': //BY VINZ
              
				if (args.length < 1) return reply(`Usage :\n${prefix}fitnah [@tag|pesan|balasanbot]]\n\nEx : \n${prefix}fitnah @tagmember|hai|hai juga`)
				var gh = body.slice(8)
				mentioned = tod.message.extendedTextMessage.contextInfo.mentionedJid
					var replace = gh.split("|")[0];
					var target = gh.split("|")[1];
					var bot = gh.split("|")[2];
					hafizh.sendMessage(from, `${bot}`, text, {quoted: { key: { fromMe: false, participant: `${mentioned}`, ...(from ? { remoteJid: from } : {}) }, message: { conversation: `${target}` }}})
					break
			    case 'infogc':
				hafizh.updatePresence(from, Presence.composing)
				if (!isGroup) return reply(mess.only.group)
					try {
					ppimg = await hafizh.getProfilePicture(from)
				} catch {
					ppimg = 'https://i.ibb.co/NthF8ds/IMG-20201223-WA0740.jpg'
				}
					let buf = await getBuffer(ppimg)
					teks = (args.length > 1) ? body.slice(8).trim() : ''
					teks += `*Nama grup :* ${groupName}\n*Deskripsi :* ${groupdesc}\n*Jumlah Admin :* ${groupAdmins.length}\n*Jumlah Member :* ${groupMembers.length}`
					no = 0
					for (let admon of groupAdmins) {
						no += 1
						teks += `[${no.toString()}]`
					}
					hafizh.sendMessage(from, buf, image, {quoted: tod, caption: teks})
					break
				case 'clearall':
					anu = await hafizh.chats.all()
					hafizh.setMaxListeners(25)
					for (let _ of anu) {
						hafizh.deleteChat(_.jid)
					}
					reply('ùó∞ùóπùó≤ùóÆùóø ùóÆùóπùóπ ùòÄùòÇùó∏ùòÄùó≤ùòÄ ùòÜùóÆùóµ :)')
					break
			       case 'block':
					if (!isGroup) return reply(mess.only.group)
					hafizh.blockUser (`${body.slice(7)}@c.us`, "add")
					hafizh.sendMessage(from, `ùóΩùó≤ùóøùó∂ùóªùòÅùóÆùóµ ùóóùó∂ùòÅùó≤ùóøùó∂ùó∫ùóÆ, ùó∫ùó≤ùó∫ùóØùóπùóºùó∏ùó∂ùóø ${body.slice(7)}@c.us`, text)
					break
                    case 'unblock':
					if (!isGroup) return reply(mess.only.group)
				    hafizh.blockUser (`${body.slice(9)}@c.us`, "remove")
					hafizh.sendMessage(from, `ùóΩùó≤ùóøùó∂ùóªùòÅùóÆùóµ ùóóùó∂ùòÅùó≤ùóøùó∂ùó∫ùóÆ, ùó∫ùó≤ùó∫ùóØùòÇùó∏ùóÆ ${body.slice(9)}@c.us`, text)
				break
				case 'leave': 
				if (!isGroup) return reply(mess.only.group)
				await hafizh.hafizh.leaveGroup(from, 'ùóïùòÜùó≤ùó≤', groupId)
	
                    break
				case 'bc': 
					if (args.length < 1) return reply('.......')
					anu = await hafizh.chats.all()
					if (isMedia && !tod.message.videoMessage || isQuotedImage) {
						const encmedia = isQuotedImage ? JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo : tod
						buff = await hafizh.downloadMediaMessage(encmedia)
						for (let _ of anu) {
							hafizh.sendMessage(_.jid, buff, image, {caption: `‚ùÆ ùòΩùôäùôè ùòΩùôçùôäùòºùòøùòæùòºùôéùôè ‚ùØ\n\n${body.slice(4)}`})
						}
						reply('ùô®ùô™ùôòùôòùôöùô®ùô® ùôóùôßùô§ùôñùôôùôòùôñùô®ùô© ')
					} else {
						for (let _ of anu) {
							sendMess(_.jid, `‚ùÆ ùòΩùôäùôè ùòΩùôçùôäùòºùòøùòæùòºùôéùôè ‚ùØ\n\n${body.slice(4)}`)
						}
						reply('ùô®ùô™ùôòùôòùôöùô®ùô® ùôóùôßùô§ùôñùôôùôòùôñùô®ùô© ')
					}
					break
			       	case 'setpp': 
                        if (!isGroup) return reply(mess.only.group)
                        if (!isBotGroupAdmins) return reply(mess.only.Badmin)
                       media = await hafizh.downloadAndSaveMediaMessage(tod)
                         await hafizh.updateProfilePicture (from, media)
                        reply('ùó¶ùòÇùó∏ùòÄùó≤ùòÄ ùó∫ùó≤ùóªùó¥ùó¥ùóÆùóªùòÅùó∂ ùó∂ùó∞ùóºùóª ùóöùóøùòÇùóΩ')
                                        break						
				case 'add':
					if (!isGroup) return reply(mess.only.group)
					if (!isBotGroupAdmins) return reply(mess.only.Badmin)
					if (args.length < 1) return reply('ùóΩùóÆùòÄùòÅùó∂ ùòÜùóÆùóªùó¥ ùó∫ùóÆùòÇ ùó±ùó∂ ùóÆùó±ùó± ùóÆùóªùóÆùó∏ ùóΩùòÇùóªùó¥ùòÇùòÅ?')
					if (args[0].startsWith('08')) return reply('ùóöùòÇùóªùóÆùó∏ùóÆùóª ùó∏ùóºùó±ùó≤ ùóªùó≤ùó¥ùóÆùóøùóÆ')
					try {
						num = `${args[0].replace(/ /g, '')}@s.whatsapp.net`
						hafizh.groupAdd(from, [num])
					} catch (e) {
						console.log('Error :', e)
						reply('ùó¥ùóÆùó¥ùóÆùóπ ùó∫ùó≤ùóªùóÆùó∫ùóØùóÆùóµùó∏ùóÆùóª, ùó∫ùòÇùóªùó¥ùó∏ùó∂ùóª ùó∏ùóÆùóøùó≤ùóªùóÆ ùó±ùó∂ ùóΩùóøùó∂ùòÉùóÆùòÅùó≤')
					}
					break
					case 'grup':
					case 'group':
					if (!isGroup) return reply(mess.only.group)
					if (!isBotGroupAdmins) return reply(mess.only.Badmin)
					if (args[0] === 'buka') {
					    reply(`ùóïùó≤ùóøùóµùóÆùòÄùó∂ùóπ ùó†ùó≤ùó∫ùóØùòÇùó∏ùóÆ ùóöùóøùóºùòÇùóΩ`)
						hafizh.groupSettingChange(from, GroupSettingChange.messageSend, false)
					} else if (args[0] === 'tutup') {
						reply(`ùóïùó≤ùóøùóµùóÆùòÄùó∂ùóπ ùó†ùó≤ùóªùòÇùòÅùòÇùóΩ ùóöùóøùóºùòÇùóΩ`)
						hafizh.groupSettingChange(from, GroupSettingChange.messageSend, true)
					}
					break
                    
            case 'admin':
            case 'owner':
            case 'creator':
                  hafizh.sendMessage(from, {displayname: "Jeff", vcard: vcard}, MessageType.contact, { quoted: tod})
       hafizh.sendMessage(from, 'wa.me/+6282338122626',MessageType.text, { quoted: tod} )
           break    
           case 'demote':
					if (!isGroup) return reply(mess.only.group)
					if (!isBotGroupAdmins) return reply(mess.only.Badmin)
					if (tod.message.extendedTextMessage === undefined || tod.message.extendedTextMessage === null) return reply('ùóßùóÆùó¥ ùòÅùóÆùóøùó¥ùó≤ùòÅ ùòÜùóÆùóªùó¥ ùó∂ùóªùó¥ùó∂ùóª ùó±ùó∂ ùòÅùó≤ùóªùó±ùóÆùóªùó¥!')
					mentioned = tod.message.extendedTextMessage.contextInfo.mentionedJid
					if (mentioned.length > 1) {
						teks = ''
						for (let _ of mentioned) {
							teks += `ùòÜùóÆùóµùóµ ùó∑ùóÆùóØùóÆùòÅùóÆùóª ùóÆùó±ùó∫ùó∂ùóª ùó∏ùóÆùó∫ùòÇ ùòÄùòÇùó±ùóÆùóµ ùó±ùó∂ ùó∞ùóºùóΩùóºùòÅ :\n`
							teks += `@_.split('@')[0]`
						}
						mentions(teks, mentioned, true)
						hafizh.groupDemoteAdmin(from, mentioned)
					} else {
						mentions(`ùòÜùóÆùóµùóµ @${mentioned[0].split('@')[0]} ùó∑ùóÆùóØùóÆùòÅùóÆùóª ùóÆùó±ùó∫ùó∂ùóª ùó∏ùóÆùó∫ùòÇ ùòÄùòÇùó±ùóÆùóµ ùó±ùó∂ ùó∞ùóºùóΩùóºùòÅ`, mentioned, true)
						hafizh.groupDemoteAdmin(from, mentioned)
					}
					break
				case 'promote':
					if (!isGroup) return reply(mess.only.group)
					if (!isBotGroupAdmins) return reply(mess.only.Badmin)
					if (tod.message.extendedTextMessage === undefined || tod.message.extendedTextMessage === null) return reply('ùóßùóÆùó¥ ùòÅùóÆùóøùó¥ùó≤ùòÅ ùòÜùóÆùóªùó¥ ùó∂ùóªùó¥ùó∂ùóª ùó±ùó∂ ùòÅùó≤ùóªùó±ùóÆùóªùó¥!')
					mentioned = tod.message.extendedTextMessage.contextInfo.mentionedJid
					if (mentioned.length > 1) {
						teks = ''
						for (let _ of mentioned) {
							teks += `DONE :\n`
							teks += `@_.split('@')[0]`
						}
						mentions(teks, mentioned, true)
						hafizh.groupMakeAdmin(from, mentioned)
					} else {
						mentions(`DONE @${mentioned[0].split('@')[0]}`, mentioned, true)
						hafizh.groupMakeAdmin(from, mentioned)
					}
					break	
			     	case 'kick':
					if (!isGroup) return reply(mess.only.group)
					if (!isBotGroupAdmins) return reply(mess.only.Badmin)
					if (tod.message.extendedTextMessage === undefined || tod.message.extendedTextMessage === null) return reply('ùóßùóÆùó¥ ùòÅùóÆùóøùó¥ùó≤ùòÅ ùòÜùóÆùóªùó¥ ùó∂ùóªùó¥ùó∂ùóª ùó±ùó∂ ùòÅùó≤ùóªùó±ùóÆùóªùó¥!')
					mentioned = tod.message.extendedTextMessage.contextInfo.mentionedJid
					if (mentioned.length > 1) {
						teks = ''
						for (let _ of mentioned) {
							teks += `Otw.... :\n`
							teks += `@_.split('@')[0]`
						}
						mentions(teks, mentioned, true)
						hafizh.groupRemove(from, mentioned)
					} else {
						mentions(`Otw... @${mentioned[0].split('@')[0]} ùòÄùóÆùòÜùóÆùóªùó¥`, mentioned, true)
						hafizh.groupRemove(from, mentioned)
					}
					break
				case 'linkgc':
				    if (!isGroup) return reply(mess.only.group)
				    if (!isBotGroupAdmins) return reply(mess.only.Badmin)
				    linkgc = await hafizh.groupInviteCode (from)
				    yeh = `https://chat.whatsapp.com/${linkgc}\n\n\nIni adalah link group *${groupName}*`
				    hafizh.sendMessage(from, yeh, text, {quoted: tod})
			        break
				case 'listadmin':
					if (!isGroup) return reply(mess.only.group)
					teks = `ùóüùó∂ùòÄùòÅ ùóÆùó±ùó∫ùó∂ùóª ùóºùó≥ ùó¥ùóøùóºùòÇùóΩ *${groupMetadata.subject}*\nùóßùóºùòÅùóÆùóπ : ${groupAdmins.length}\n\n`
					no = 0
					for (let admon of groupAdmins) {
						no += 1
						teks += `[${no.toString()}] @${admon.split('@')[0]}\n`
					}
					mentions(teks, groupAdmins, true)
					break
				case 'toimg':
					if (!isQuotedSticker) return reply('ùó•ùó≤ùóΩùóπùòÜ/ùòÅùóÆùó¥ ùòÄùòÅùó∂ùó∞ùó∏ùó≤ùóø!')
					reply(mess.wait)
					encmedia = JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo
					media = await hafizh.downloadAndSaveMediaMessage(encmedia)
					ran = getRandom('.png')
					exec(`ffmpeg -i ${media} ${ran}`, (err) => {
						fs.unlinkSync(media)
						if (err) return reply('ùó¨ùóÆùóµ ùó¥ùóÆùó¥ùóÆùóπ, ùòÇùóπùóÆùóªùó¥ùó∂ ùóπùóÆùó¥ùó∂ ùòÄùóÆùòÜùóÆùóªùó¥')
						buffer = fs.readFileSync(ran)
						hafizh.sendMessage(from, buffer, image, {quoted: tod, caption: 'ùó°ùó∂ùóµ ùó¶ùóÆùòÜùóÆùóªùó¥'})
						fs.unlinkSync(ran)
					})
					break
					
				case 'simi':
					if (args.length < 1) return reply('ùó∏ùóÆùòÄùó∂ùóµ ùòÅùó≤ùó∏ùòÄ ùóπùóÆùóµ!!!')
					teks = body.slice(5)
					anu = await simih(teks) //fetchJson(`https://mhankbarbars.herokuapp.com/api/samisami?text=${teks}`, {method: 'get'})
					//if (anu.error) return reply('Simi ga tau kak')
					reply(anu)
					break
				case 'simih':
					if (!isGroup) return reply(mess.only.group)
					if (args.length < 1) return reply('ùóúùòÜùóÆ ùòÄùóÆùòÜùóÆùóªùó¥')
					if (Number(args[0]) === 1) {
						if (isSimi) return reply('ùòÄùòÇùó±ùóÆùóµ ùóÆùó∏ùòÅùó∂ùó≥!!!')
						samih.push(from)
						fs.writeFileSync('./src/simi.json', JSON.stringify(samih))
						reply('‚ù¨ ùó¶ùó®ùóûùó¶ùóòùó¶ ‚ù≠ ùó†ùó≤ùóªùó¥ùóÆùó∏ùòÅùó∂ùó≥ùó∏ùóÆùóª ùó≥ùó∂ùòÅùòÇùóø ùòÄùó∂ùó∫ùó∂ ùó±ùó∂ ùó¥ùóøùóºùòÇùóΩ ùó∂ùóªùó∂Ô∏è')
					} else if (Number(args[0]) === 0) {
						samih.splice(from, 1)
						fs.writeFileSync('./src/simi.json', JSON.stringify(samih))
						reply('‚ù¨ ùó¶ùó®ùóûùó¶ùóòùó¶ ‚ù≠ ùó†ùó≤ùóªùóºùóªùóÆùó∏ùòÅùó∂ùó≥ùó∏ùóÆùóª ùó≥ùó∂ùòÅùòÇùóø ùòÄùó∂ùó∫ùó∂ ùó±ùó∂ ùó¥ùóøùóºùòÇùóΩ ùó∂ùóªùó∂Ô∏èÔ∏è')
					} else {
						reply('ùó∏ùó≤ùòÅùó∂ùó∏ ùóΩùó≤ùóøùó∂ùóªùòÅùóÆùóµ ùü≠ ùòÇùóªùòÅùòÇùó∏ ùó∫ùó≤ùóªùó¥ùóÆùó∏ùòÅùó∂ùó≥ùó∏ùóÆùóª, ùü¨ ùòÇùóªùòÅùòÇùó∏ ùó∫ùó≤ùóªùóºùóªùóÆùó∏ùòÅùó∂ùó≥ùó∏ùóÆùóª\nùó∞ùóºùóªùòÅùóºùóµ: ùòÄùó∂ùó∫ùó∂ùóµ ùü≠')
					}
					break
				case 'nsfw':
					if (!isGroup) return reply(mess.only.group)
					if (args.length < 1) return reply('ùóúùòÜùóÆ ùòÄùóÆùòÜùóÆùóªùó¥')
					if (Number(args[0]) === 1) {
						if (isNsfw) return reply('ùòÄùòÇùó±ùóÆùóµ ùóÆùó∏ùòÅùó∂ùó≥!!!')
						nsfw.push(from)
						fs.writeFileSync('./src/nsfw.json', JSON.stringify(nsfw))
						reply('‚ù¨ ùó¶ùó®ùóûùó¶ùóòùó¶ ‚ù≠ ùó†ùó≤ùóªùó¥ùóÆùó∏ùòÅùó∂ùó≥ùó∏ùóÆùóª ùó≥ùó∂ùòÅùòÇùóø ùóªùòÄùó≥ùòÑ ùó±ùó∂ ùó¥ùóøùóºùòÇùóΩ ùó∂ùóªùó∂')
					} else if (Number(args[0]) === 0) {
						nsfw.splice(from, 1)
						fs.writeFileSync('./src/nsfw.json', JSON.stringify(nsfw))
						reply('‚ù¨ ùó¶ùó®ùóûùó¶ùóòùó¶ ‚ù≠ ùó†ùó≤ùóªùóºùóªùóÆùó∏ùòÅùó∂ùó≥ùó∏ùóÆùóª ùó≥ùó∂ùòÅùòÇùóø ùóªùòÄùó≥ùòÑ ùó±ùó∂ ùó¥ùóøùóºùòÇùóΩ ùó∂ùóªùó∂Ô∏è')
					} else {
						reply('ùó∏ùó≤ùòÅùó∂ùó∏ ùóΩùó≤ùóøùó∂ùóªùòÅùóÆùóµ ùü≠ ùòÇùóªùòÅùòÇùó∏ ùó∫ùó≤ùóªùó¥ùóÆùó∏ùòÅùó∂ùó≥ùó∏ùóÆùóª, ùü¨ ùòÇùóªùòÅùòÇùó∏ ùó∫ùó≤ùóªùóºùóªùóÆùó∏ùòÅùó∂ùó≥ùó∏ùóÆùóª\nùó∞ùóºùóªùòÅùóºùóµ: ùóªùòÄùó≥ùòÑ ùü≠')
					}
					break
				case 'welcome':
					if (!isGroup) return reply(mess.only.group)
					if (args.length < 1) return reply('ùóúùòÜùóÆ ùòÄùóÆùòÜùóÆùóªùó¥')
					if (Number(args[0]) === 1) {
						if (isWelkom) return reply('ùòÄùòÇùó±ùóÆùóµ ùóÆùó∏ùòÅùó∂ùó≥!!!')
						welkom.push(from)
						fs.writeFileSync('./src/welkom.json', JSON.stringify(welkom))
						reply('‚ù¨ ùó¶ùó®ùóûùó¶ùóòùó¶ ‚ù≠ ùó†ùó≤ùóªùó¥ùóÆùó∏ùòÅùó∂ùó≥ùó∏ùóÆùóª ùó≥ùó∂ùòÅùòÇùóø ùòÑùó≤ùóπùó∞ùóºùó∫ùó≤/ùóπùó≤ùó≥ùòÅ ùó±ùó∂ ùó¥ùóøùóºùòÇùóΩ ùó∂ùóªùó∂Ô∏è')
					} else if (Number(args[0]) === 0) {
						welkom.splice(from, 1)
						fs.writeFileSync('./src/welkom.json', JSON.stringify(welkom))
						reply('‚ù¨ ùó¶ùó®ùóûùó¶ùóòùó¶ ‚ù≠ ùó†ùó≤ùóªùóºùóªùóÆùó∏ùòÅùó∂ùó≥ùó∏ùóÆùóª ùó≥ùó∂ùòÅùòÇùóø ùòÑùó≤ùóπùó∞ùóºùó∫ùó≤/ùóπùó≤ùó≥ùòÅ ùó±ùó∂ ùó¥ùóøùóºùòÇùóΩ ùó∂ùóªùó∂Ô∏è')
					} else {
						reply('ùó∏ùó≤ùòÅùó∂ùó∏ ùóΩùó≤ùóøùó∂ùóªùòÅùóÆùóµ ùü≠ ùòÇùóªùòÅùòÇùó∏ ùó∫ùó≤ùóªùó¥ùóÆùó∏ùòÅùó∂ùó≥ùó∏ùóÆùóª, ùü¨ ùòÇùóªùòÅùòÇùó∏ ùó∫ùó≤ùóªùóºùóªùóÆùó∏ùòÅùó∂ùó≥ùó∏ùóÆùóª\nùó∞ùóºùóªùòÅùóºùóµ: ${prefix}ùòÑùó≤ùóπùó∞ùóºùó∫ùó≤ ùü≠')
					}
					break
				case 'clone':
					if (!isGroup) return reply(mess.only.group)
					if (args.length < 1) return reply('ùòÅùóÆùó¥ ùòÅùóÆùóøùó¥ùó≤ùòÅ ùòÜùóÆùóªùó¥ ùó∫ùóÆùòÇ ùó±ùó∂ ùó∞ùóπùóºùóªùó≤!!!')
					if (tod.message.extendedTextMessage === undefined || tod.message.extendedTextMessage === null) return reply('Tag cvk')
					mentioned = tod.message.extendedTextMessage.contextInfo.mentionedJid[0]
					let { jid, id, notify } = groupMembers.find(x => x.jid === mentioned)
					try {
						pp = await hafizh.getProfilePicture(id)
						buffer = await getBuffer(pp)
						hafizh.updateProfilePicture(botNumber, buffer)
						mentions(`Foto profile Berhasil di perbarui menggunakan foto profile @${id.split('@')[0]}`, [jid], true)
					} catch (e) {
						reply('ùó¨ùóÆùóµ ùó¥ùóÆùó¥ùóÆùóπ, ùòÇùóπùóÆùóªùó¥ùó∂ ùóπùóÆùó¥ùó∂ ùòÄùóÆùòÜùóÆùóªùó¥')
					}
					break
				case 'wait':
					if ((isMedia && !tod.message.videoMessage || isQuotedImage) && args.length == 0) {
						reply(mess.wait)
						const encmedia = isQuotedImage ? JSON.parse(JSON.stringify(tod).replace('quotedM','m')).message.extendedTextMessage.contextInfo : tod
						media = await hafizh.downloadMediaMessage(encmedia)
						await wait(media).then(res => {
							hafizh.sendMessage(from, res.video, video, {quoted: tod, caption: res.teks.trim()})
						}).catch(err => {
							reply(err)
						})
					} else {
						reply('ùó∏ùó∂ùóøùó∂ùó∫ ùó≥ùóºùòÅùóº ùó±ùó≤ùóªùó¥ùóÆùóª ùó∞ùóÆùóΩùòÅùó∂ùóºùóª ùóºùó∞ùóø')
					}
					break
				default:
			if (isGroup && isSimi && budy != undefined) {
						console.log(budy)
						muehe = await simih(budy)
						console.log(muehe)
						reply(muehe)
					} else {
					}
					}
		} catch (e) {
			console.log('Error : %s', color(e, 'red'))
		}
	})

                   

